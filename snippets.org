#+STARTUP: content
* CLI Commands

** Compression & decompression
tar -xvzf filename.tar.gz filename # gzip extract
tar -cvzf filename.tar.gz filename # gzip compress
tar -xvjf filename.tar.bz filename # bzip extract
tar -cvjf filename.tar.gz filename # bzip compress
unzip file.zip -d destination_folder

** Docker
docker exec -it CONTAINER-NAME COMMAND  # run an interactive command on an already running container

** Python
py.test --verbose -vv --cov-report term-missing --cov <PACKAGE_DIR> --cov-report term-missing -s <FILE.py>   # pytest specific file or module
py.test --verbose -vv --cov-report term-missing --cov <PACKAGE_DIR> --cov-report term-missing -s <FILE.py> -k '<FUNCTION_NAME>'  # pytest specific function in a file or module
pyenv activate spotify # activate Spotify env

** General
df -h  # find size of each partition of file system
du -sh  # cumulative size of all files in directory
du -h FILENAME  # size of file
tree -L 1 -dif ./ | xargs -i du -sh {}  # list all subdirectories (relative paths + sizes) upto some depth
ls | head  # list the top 10 items of ls
ls | tail  # list the bottom 10 items of ls
ls -l | wc -l  # count the number of files in the folder
ln -s /path/to/original /path/to/symlink  # symbolic or soft link
lsof -i -P -n | grep LISTEN  # use sudo; list ports which are busy or listening
rsync -avz -e "ssh -p <PORT-NUMBER>" --progress /path/to/source username@hostname:/path/to/dest   # rsync over ssh, copy from local to remote
rsync -avz -e "ssh -p <PORT-NUMBER>" --progress username@hostname:/path/to/source /path/to/dest   # rsync over ssh, copy from remote to local
pandoc -s -r html <url> -o file.org #save webpage as org file
sudo nmap -sn 192.168.10.0/24 # scan network for devices
sudo !! # run previous command as sudo
fc # fix previous command in an editor
ssh -L 3337:<remote-host>:<remote-port> root@domain -N # connection locahost 3337 port to remote ip/port
tee -a <file> # Intercept stout to a file
for i in $(cat tmp.tmp); do jhurl -s services.gew1.spotify.net --method GET "hm://userdata/account?user_id=$i"; done #quick loop through
top -H -p <pid> #See threads from a process
ps -T -P <pid> #All threads from a process
sed -n '3,5p' filen #Get range of files from a file
awk -F, '{print $2}' file #Print columns from file
comm -23 filea fileb #Diff files
echo "userId,ppid,country,plan" | jq -cRra 'split(",") | {"userId": .[0], "productPeriodId": .[1] | sub("^01_"; "") | tonumber, "country": .[2],  "planType": .[3]}' #csv to json
** Tmux
tmux new -s myname  # start new with session name
tmux a -t myname  # attach to named session
tmux ls  # list session
tmux kill-session -t myname  # kill session by name
CTRL-bD  # tmux detach

** Gcloud
gcloud sql connect family-db-guc --user=family --quiet --project=ib-family # connect to cloud sql

** Jhurl
jhurl -z tcp://<host:port> -X POST 'hm://parental-control/v1/settings/client-writable-authority-check' # jhurl to host

services.gew1.spotify.net # to one region
services.spotify.net # to any regions
services.shared.cloud.spotify.net # to shared
*** Userdata
pbpaste | xargs -I {} echo '{"usernames": ["{}"]}' | jhurl -s services.gew1.spotify.net hm://userdata/ids -p | jq '.[].user_id' | tr -d '"' | pbcopy # userid from username
pbpaste | xargs -I {} echo '{"user_ids": ["{}"]}' | jhurl -s services.gew1.spotify.net hm://userdata/ids -p | jq '.[].username' | tr -d '"' | pbcopy # username from userid
jhurl -s services.gew1.spotify.net hm://identity/v1/user/%7Bm1ck3y%7D | jq # user identity
jhurl -s services.gew1.spotify.net hm://userdata/account?user_id=1417e509674f48d9a77ffea4ff5d1816 -p | jq # userdata by user_id
*** Family
curl -H "Content-Type: application/json" -H "_ui:$(printf "%b" '\x01')r USER_ID" -s http://host.spotify.net/v1/family/home # curl for hermes
echo '{"planType":"DUO"}' | jhurl -s services.gew1 -X "POST" "hm://family/v1/internal/family/home" --userid=de88319ce6b44089b811a940cdf10db0 -p | jq #create a family master
echo '{"address":"20 rue Beranger, 75003 Paris","placeId":"ChIJ9wd7mAhu5kcRwz5BP-XfZts"}' | jhurl -s services.gew1 -X "POST" "hm://family/v1/family/home/onboard" --userid=de88319ce6b44089b811a940cdf10db0 -p | jq # onboard master
echo '{"inviteToken":"c7y0348bZb7","address":"20 rue Beranger, 75003 Paris"}' | jhurl -s services.gew1 -X "POST" "hm://family/v1/family/member" --userid=85d8fcc00bd34d73acab19175a7139d9 -p | jq # add member
echo '{"memberId":"3746654e-693b-412e-832c-da61de8c201b"}' | jhurl -s services.shared.cloud.spotify.net -X DELETE hm://family/v1/family/member/3746654e-693b-412e-832c-da61de8c201b --userid a3204151f86243449813313b5bfdb841clea # delete a plan
jhurl -s services.gew1 -X "DELETE" "hm://family/v1/internal/family/home" --userid=d0d1470adb754bf18f7af9ee52a49f36 # delete home
jhurl -s services.shared.cloud.spotify.net hm://family/v1/family/home --userid a3204151f86243449813313b5bfdb841 -p | jq # get home for user
jhurl -s services.shared.cloud.spotify.net 'hm://family/meta/health' # family health
jhurl -s services.shared.cloud.spotify.net 'hm://family/v1/playlists' --userid ee257b28c0764c80b82689bff3c4e89c # get user playlists
echo '{"shareWithMemberId":"40ef4772-8db6-4b2e-b2c9-4dac28ee122d"}' |jhurl -X POST -s services.gew1 'hm://family/v1/family/playlists' --userid 3ab18d1e222c43c78c8bd6caf6919a71 # share playlists
echo '{"sharerId":"8c762654-742f-4eed-9ccf-657c7a1b692b"}' | jhurl -X POST -s services.gew1 'hm://family/v1/family/playlists/reject' --userid f7ba2d5db25b4289b9ff984c4e4226f0 # reject playlists
echo '{"sharerId":"8c762654-742f-4eed-9ccf-657c7a1b692b", "folderName":"Duo;)"}' |jhurl -X POST -s services.gew1 'hm://family/v1/family/playlists/accept' --userid f7ba2d5db25b4289b9ff984c4e4226f0 # accept playlist

** IMOC
ldapsearch -H ldap://gew1-ds-d-4cgl.gew1.spotify.net -D 'uid=deepak,ou=people,ou=spotify,dc=spotify,dc=net' -W -b ou=people,ou=spotify,dc=spotify,dc=net 'uid=deepak' # ldap search

** Payments
curl -X POST http://localhost:5050/v4/family/provision_subaccount_premium # payments http-api port 5050

** Misc
ssh-add ~/.ssh/id_rsa #Add ssh keys
disco role parentalcontrol --spoticloud # service discovery on shared
dig -t srv _spotify-parental-control._http.services.shared.cloud.spotify.net #service discovery
curl cheat.sh #CLI cheat sheet
nohup command &>/dev/null & #run task in background
